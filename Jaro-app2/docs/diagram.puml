@startuml
class InventoryManagementApplication{
+main()
+start(Stage)
}
class SceneManager {
    - scenes: Map<String, Scene>
    + load(): void
    + getScene(String): Scene
    - loadScene(String, FXMLLoader): void
}
class AddItemController{
    + gridPane: GridPane
    + nameDisplay: TextField
    + valueDisplay: TextField
    + serialDisplay: TextField
    - inventoryModel: InventoryModel
    - sceneManager: SceneManager
    + AddItemController(InventoryModel, SceneManager)
    + initialize(): void
    + addClicked(MouseEvent): void
    + cancelClicked(MouseEvent): void
    + checkValid(): Boolean
    + addItem(String, String, Double): void
    - showError(String): void
    - cancel(): void
}
class EditItemController{
    + gridPane: GridPane
    + nameDisplay: TextField
    + valueDisplay: TextField
    + serialDisplay: TextField
    - myInventory: InventoryModel
    - sceneManager: SceneManager
    + EditItemController(InventoryModel, SceneManager)
    + initialize(): void
    + editClicked(MouseEvent): void
    + cancelClicked(MouseEvent): void
    + editItem(String, String, String): void
    + isValidEdit(String, String, String): Boolean
    - showError(String): void
    - cancel(): void
}

class InventoryController{
 + gridPane: GridPane
    + itemTable: TableView
    + valueDisplay: TableColumn
    + serialDisplay: TableColumn
    + nameDisplay: TableColumn
    + searchField: TextField
    - inventoryModel: InventoryModel
    - sceneManager: SceneManager

    + InventoryController(InventoryModel, SceneManager): void
    + initialize(): void
    + addItemClicked(MouseEvent): void
    + removeItemClicked(MouseEvent): void
    + editItemClicked(MouseEvent): void
    + saveClicked(ActionEvent): void
    + loadClicked(ActionEvent): void
    + closeClicked(ActionEvent): void
    + removeItem(Integer): void
    - openNewController(String, String)
    - openSaveFileChooser(): File
    - openLoadFileChooser(): File
    - close(): void
}
class InventoryItem{
 - value: Double
 - serialNumber: String
 - name: String
 + Inventory(String, String, Double)
+ getName(): String
+ getSerial(): String
+ getValue(): String
+ setSerial(String): void
+ setName(String): void
+ setValue(double): void
}
class InventoryObject{
- items: List<Inventory>
+ getItems(List<Inventory>): List
+ setItems(List<Inventory>): void
}
class InventoryModel{
    - items: ObservableList<InventoryItem>
    - editIndex: int
    + InventoryModel()
    + setList(List<InventoryItem>): void
    + getItem(): ObservableList<InventoryItem>
    + setEditIndex(int): void
    + getEditIndex(): int
}
class Validator{
    - myInventory: InventoryModel
    + Validator(InventoryModel)
    + isValidSerial(String): Boolean
    + isValidName(String): Boolean
    + isValidValue(String): Boolean
    + isValidSerialLength(String): Boolean
    + isValidSerialCharacters(String): Boolean
    + isUniqueSerialNumber(String): Boolean
    + isValidNameLength(String): Boolean
    + isValidNumericValue(String): Boolean
    + isValidUSValue(String): Boolean
}
class Serialization {
    - myInventory: InventoryModel
    + save(File)
    + saveTSV(String)
    + saveHTML(String)
    + saveJSON(String)
    + load(File)
    + loadTSV(File)
    + loadHTML(File)
    + loadJSON(File)
}
javafx.Application <|-- InventoryManagementApplication
InventoryManagementApplication -- SceneManager
SceneManager --* InventoryController
SceneManager --* AddItemController
SceneManager --* EditItemController
InventoryController -- Serialization
InventoryController *-- InventoryModel
InventoryController -down- AddItemController
InventoryController -down- EditItemController
AddItemController *-- InventoryModel
AddItemController -- Validator
EditItemController *-- InventoryModel
EditItemController -- Validator
InventoryModel *-- InventoryItem
Validator *- InventoryModel
Serialization *- InventoryModel
Serialization -- InventoryObject
@enduml
